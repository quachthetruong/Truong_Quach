<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Computer Science on Quach</title>
    <link>https://quachthetruong.github.io/tags/computer-science/</link>
    <description>Recent content in Computer Science on Quach</description>
    <image>
      <title>Quach</title>
      <url>https://quachthetruong.github.io/papermod-cover.png</url>
      <link>https://quachthetruong.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- 0.146.5</generator>
    <language>en</language>
    <lastBuildDate>Thu, 24 Apr 2025 17:29:51 +0700</lastBuildDate>
    <atom:link href="https://quachthetruong.github.io/tags/computer-science/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How Computers Do Differentiation?</title>
      <link>https://quachthetruong.github.io/posts/technical/auto-differentiation/</link>
      <pubDate>Thu, 24 Apr 2025 17:29:51 +0700</pubDate>
      <guid>https://quachthetruong.github.io/posts/technical/auto-differentiation/</guid>
      <description>&lt;p&gt;Differentiation is a key concept in machine learning, especially when optimizing functions like loss functions in neural networks. It helps us find the minimum of these functions, which is crucial for tasks like training a model. But have you ever wondered how popular libraries like &lt;strong&gt;TensorFlow&lt;/strong&gt; and &lt;strong&gt;PyTorch&lt;/strong&gt; perform differentiation? Let’s break it down!&lt;/p&gt;
&lt;h2 id=&#34;1-manual-differentiation-the-old-school-method&#34;&gt;1. Manual Differentiation: The Old-School Method&lt;/h2&gt;
&lt;p&gt;In school, we learn how to manually compute derivatives using calculus. You apply a set of rules to functions to find how they change with respect to their inputs. For example, given a simple function like:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why the Average Complexity of QuickSort is O(nlogn)?</title>
      <link>https://quachthetruong.github.io/posts/technical/quick-sort-time-complexity/</link>
      <pubDate>Mon, 21 Apr 2025 17:29:51 +0700</pubDate>
      <guid>https://quachthetruong.github.io/posts/technical/quick-sort-time-complexity/</guid>
      <description>&lt;p&gt;For most developers, QuickSort is a fast and efficient sorting algorithm with a time complexity of &lt;code&gt;O(nlogn)&lt;/code&gt;. This makes it significantly better than other common sorting algorithms, like Selection Sort or Bubble Sort, which have a time complexity of &lt;code&gt;O(n²)&lt;/code&gt;. However, the question remains: &lt;strong&gt;Why is the average time complexity of QuickSort O(nlogn)?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this blog, we will delve deep into the mathematical and probabilistic principles that explain this efficiency, helping you understand the underlying reasons why QuickSort is faster than other algorithms on average.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bloom Filters Explained: A Fast and Space-Efficient Probabilistic Solution</title>
      <link>https://quachthetruong.github.io/posts/technical/bloom-filters-explained/</link>
      <pubDate>Fri, 18 Apr 2025 17:29:51 +0700</pubDate>
      <guid>https://quachthetruong.github.io/posts/technical/bloom-filters-explained/</guid>
      <description>&lt;h2 id=&#34;part-1-motivation&#34;&gt;Part 1: Motivation&lt;/h2&gt;
&lt;h3 id=&#34;how-do-we-check-if-something-is-in-a-set--fast&#34;&gt;How do we check if something is in a set — fast?&lt;/h3&gt;
&lt;p&gt;The simplest way is a &lt;code&gt;List&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; items:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But this is &lt;code&gt;O(n)&lt;/code&gt; — too slow for large-scale systems.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;HashSet&lt;/code&gt; improves to &lt;code&gt;O(1)&lt;/code&gt; lookups on average,
but it stores the full elements, requiring &lt;strong&gt;more memory than raw data&lt;/strong&gt; — especially for strings or objects.&lt;/p&gt;
&lt;h3 id=&#34;so-what-if-we-trade-a-little-accuracy-for-massive-savings&#34;&gt;So what if we trade a little accuracy for massive savings?&lt;/h3&gt;
&lt;p&gt;What if a structure could:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
